/* Generated By:JavaCC: Do not edit this line. EG1.java */
import java.util.*;

public class EG1 implements EG1Constants {
  static int tempCounter;
  private static VerboseStack stack, breakStack, contStack;
  private static ArrayList<Quad> quadList;

  public static void main(String args []) throws ParseException
  {
    EG1 parser = new EG1(System.in);
    while (true)
    {
      stack = new VerboseStack();
      breakStack = new VerboseStack();
      contStack = new VerboseStack();
      quadList = new ArrayList<Quad>();
      tempCounter = 1;
      System.out.println("Reading from standard input...");
      System.out.print("$ > ");
      try
      {
        if (EG1.program())
        {
          System.out.println("OK.");
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        EG1.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public boolean program() throws ParseException {
    jj_consume_token(LBRACE);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      function();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case NOT:
      case LBRACE:
      case LPAREN:
      case SEMI:
      case BREAK:
      case CONT:
      case IF:
      case RET:
      case WHILE:
      case INT:
      case ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      statement();
    }
    jj_consume_token(RBRACE);
          System.out.println("- QuadList -");
          int i = 0;
          for (Quad q : quadList)
          {
                System.out.println(i++ + ") " + q.toString());
          }

          System.out.println("- Stack -");
          for (Object o : stack)
          {
                System.out.println(o);
          }

          if (stack.size() == 0)
                System.out.println("empty");

          {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  static final public void function() throws ParseException {
    jj_consume_token(FN);
    jj_consume_token(ID);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case NOT:
      case LBRACE:
      case LPAREN:
      case SEMI:
      case BREAK:
      case CONT:
      case IF:
      case RET:
      case WHILE:
      case INT:
      case ID:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      statement();
    }
    jj_consume_token(RBRACE);
  }

  static final public void statement() throws ParseException {
  int nextQuad;
  Object o, p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      compound_statement();
      break;
    case WHILE:
      jj_consume_token(WHILE);
          stack.push(quadList.size());
          contStack.push(quadList.size());
      test();
          o = stack.pop();
          stack.push(quadList.size());
          breakStack.push(quadList.size());
          quadList.add(new Quad("jeqz", o.toString(), null, "-1"));
      statement();
          o = stack.pop();
          p = stack.pop();
          quadList.add(new Quad("jump", null, null, p.toString()));
          int whileJump = quadList.size();

          int x = (int) breakStack.pop();
          while (x != -1)
          {
            Quad q = quadList.get(x);
            x = Integer.parseInt(q.getDestination());
            q.setDestination(whileJump);
          }

          contStack.pop();
      break;
    case IF:
      jj_consume_token(IF);
      test();
          nextQuad = quadList.size();
          o = stack.pop();
          quadList.add(new Quad("jeqz", o.toString(), null, null));
          stack.push(nextQuad);
      statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
          nextQuad = quadList.size();
          quadList.add(new Quad("jump", null, null, null));
          o = stack.pop();
          quadList.get((int) o).setDestination((nextQuad+1) + "");
          stack.push(nextQuad);
        statement();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
          o = stack.pop();
          quadList.get((int) o).setDestination(quadList.size() + "");
      break;
    case MINUS:
    case NOT:
    case LPAREN:
    case INT:
    case ID:
      expression();
      jj_consume_token(SEMI);
          Object l = stack.pop(); //clean off leftover stack

      break;
    case BREAK:
      jj_consume_token(BREAK);
      jj_consume_token(SEMI);
          Object nq = breakStack.pop();
          breakStack.push(quadList.size());
          quadList.add(new Quad("jump",null,null,nq.toString()));
      break;
    case RET:
      jj_consume_token(RET);
      expression();
      jj_consume_token(SEMI);
          quadList.add(new Quad("RTS", stack.pop().toString(), null, null));
      break;
    case CONT:
      jj_consume_token(CONT);
      jj_consume_token(SEMI);
          Object loc = contStack.pop();
          contStack.push(loc);
          quadList.add(new Quad("jump", null, null, loc.toString()));
      break;
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void compound_statement() throws ParseException {
    jj_consume_token(LBRACE);
    statement_list();
    jj_consume_token(RBRACE);
  }

  static final public void statement_list() throws ParseException {
    statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NOT:
    case LBRACE:
    case LPAREN:
    case SEMI:
    case BREAK:
    case CONT:
    case IF:
    case RET:
    case WHILE:
    case INT:
    case ID:
      statement_list();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void test() throws ParseException {
    jj_consume_token(LPAREN);
    expression();
    jj_consume_token(RPAREN);

  }

  static final public void expression() throws ParseException {
    if (jj_2_1(2)) {
      jj_consume_token(ID);
          stack.push(getToken(0).image);
          stack.push(getToken(0).image);
      jj_consume_token(EQ);
      expression();
          Object exp = stack.pop();
          Object des = stack.pop();
          quadList.add(new Quad("copy", exp.toString(), "", des.toString()));
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case NOT:
      case LPAREN:
      case INT:
      case ID:
        fn_call();

        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void fn_call() throws ParseException {
    condition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case ID:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          jj_consume_token(ID);
          break;
        case INT:
          jj_consume_token(INT);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void condition() throws ParseException {
    disjunction();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QMARK:
      jj_consume_token(QMARK);
          Object o = stack.pop();
          int nq1 = quadList.size();
          quadList.add(new Quad("jeqz", o.toString(), null, null));
          stack.push(nq1);
      expression();
          Object expr = stack.pop();
          Object nq = stack.pop();
          Object var = stack.pop();
          quadList.add(new Quad("copy", expr.toString(), null, var.toString()));
          stack.push(var);
          stack.push(nq);
      jj_consume_token(COLON);
          int nq2 = quadList.size();
          quadList.add(new Quad("jump", null, null, null));
          Object loc = stack.pop();
          quadList.get((int) loc).setDestination(quadList.size());
          stack.push(nq2);
      condition();
          Object b = stack.pop();
          Object a = stack.pop();
          Object c = stack.pop();
          //quadList.add(new Quad("copy", b.toString(), null, c.toString()));
          quadList.get((int) a).setDestination(quadList.size()+1);
          stack.push(c);
          stack.push(b);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void disjunction() throws ParseException {
    conjunction();
    disjunctionP();
  }

  static final public void disjunctionP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      conjunction();
          Object a = stack.pop();
          Object b = stack.pop();
          quadList.add(new Quad("|", a.toString(), b.toString(), "temp"+tempCounter));
          stack.push("temp"+tempCounter++);
      disjunctionP();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static final public void conjunction() throws ParseException {
    comparison();
    conjunctionP();
  }

  static final public void conjunctionP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      comparison();
          Object a = stack.pop();
          Object b = stack.pop();
          quadList.add(new Quad("&", a.toString(), b.toString(), "temp"+tempCounter));
          stack.push("temp"+tempCounter++);
      conjunctionP();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void comparison() throws ParseException {
    relation();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEQ:
      jj_consume_token(DEQ);
      relation();
          Object a = stack.pop();
          Object b = stack.pop();
          quadList.add(new Quad("==", a.toString(), b.toString(), "temp"+tempCounter));
          stack.push("temp"+tempCounter++);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void relation() throws ParseException {
    sum();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
    case GT:
      rel_op();
      sum();
          Object s1 = stack.pop();
          Object op = stack.pop();
          Object s2 = stack.pop();
          quadList.add(new Quad(op.toString(), s2.toString(), s1.toString(), "temp"+tempCounter));
          stack.push("temp"+tempCounter);
          tempCounter++;
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public void sum() throws ParseException {
    term();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
      sumP();
    }
  }

  static final public void sumP() throws ParseException {
    add_op();
    term();
          Object op1 = stack.pop();
          String operation = stack.pop().toString();
          Object op2 = stack.pop();

          quadList.add(new Quad(operation, op1.toString(), op2.toString(), "temp" + tempCounter));
          stack.push("temp" + tempCounter);
          tempCounter++;
  }

  static final public void term() throws ParseException {
    factor();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case MOD:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
      termP();
    }
  }

  static final public void termP() throws ParseException {
    mul_op();
    factor();
          Object op1 = stack.pop();
          String operation = stack.pop().toString();
          Object op2 = stack.pop();

          quadList.add(new Quad(operation, op1.toString(), op2.toString(), "temp" + tempCounter));
          stack.push("temp"+tempCounter);
          tempCounter++;
  }

  static final public void factor() throws ParseException {
  Object op = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NOT:
      unary_op();
      primary();
          Object p = stack.pop();
          Object u = stack.pop();
          if ("!".equals(u.toString()))
          {
                quadList.add(new Quad("!", p.toString(), null, "temp"+tempCounter));
                stack.push("temp"+tempCounter++);
          }
          else if ("-".equals(u.toString()))
          {
            quadList.add(new Quad("u-", p.toString(), null, "temp"+tempCounter));
            stack.push("temp"+tempCounter++);
          }
      break;
    case LPAREN:
    case INT:
    case ID:
      primary();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void primary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
          stack.push(getToken(0).image);
      break;
    case INT:
      jj_consume_token(INT);
          stack.push(Integer.valueOf(getToken(0).image));
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void rel_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
          stack.push("<");
      break;
    case GT:
      jj_consume_token(GT);
          stack.push(">");
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void mul_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
          stack.push("*");
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
          stack.push("/");
      break;
    case MOD:
      jj_consume_token(MOD);
          stack.push("%");
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void add_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
          stack.push("+");
      break;
    case MINUS:
      jj_consume_token(MINUS);
          stack.push("-");
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void unary_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
          stack.push("-");
      break;
    case NOT:
      jj_consume_token(NOT);
          stack.push("!");
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public EG1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000000,0x3b80a440,0x0,0x3b80a440,0x4000000,0x3b80a440,0x3b80a440,0x8440,0x0,0x0,0x8000,0x80000,0x100000,0x200000,0x1000,0x60000,0x60,0x380,0x8440,0x8000,0x60000,0x380,0x60,0x440,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x6,0x4,0x6,0x0,0x6,0x6,0x6,0x6,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EG1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG1(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EG1(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EG1(EG1TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
